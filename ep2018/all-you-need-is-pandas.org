#+TITLE: All You Need is Pandas
#+TITLE: Unexpected Success Stories
#+AUTHOR: Dimiter Naydenov
#+EMAIL: @dimitern

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal_center:nil
#+OPTIONS: reveal_progress:nil
#+OPTIONS: reveal_width:1440
#+OPTIONS: reveal_height:900
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 3.5
#+OPTIONS: reveal_history:t
#+REVEAL_THEME: sky
#+REVEAL_ROOT: ./common/reveal.js-3.8.0/
#+REVEAL_EXTRA_CSS: ./css/extra.css
#+REVEAL_EXTRA_JS: {src:'./common/js/jquery-3.3.1.slim.min.js', async:false}, {src:'./js/svg-example-anim.js', async:false}
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: default
#+REVEAL_HLEVEL: 1
#+REVEAL_PLUGINS: (highlight notes zoom print-pdf search)
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION: slide
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE: 40%
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT: no-repeat
#+REVEAL_INIT_SCRIPT: pdfMaxPagesPerSlide: 1, pdfSeparateFragments: false


* All You Need is Pandas
:PROPERTIES:
:CUSTOM_ID: title
:END:

/Unexpected Success Stories/

\\
\\

Dimiter Naydenov

=@dimitern=\\
[[file:img/icontwitter.png]]
[[file:img/icongithub.png]]

\\

[[file:img/europython-2018-logo-white-bg-small.png]]

#+BEGIN_NOTES

Hello everyone, and thanks for joining!

My name is Dimiter Naydenov, and I'm excited to present to you my first ever
EuroPython talk!

I'm quite passionate about Pandas, and I hope by the end of my talk you would be eager
try it as well.

Let me tell you a bit about myself first.

#+END_NOTES

** About me
:PROPERTIES:
:CUSTOM_ID: about
:END:

=from Bulgaria.Sofia import Dimiter.Naydenov=

#+ATTR_REVEAL: :frag (t)
  * /tags:/ =Python=, =Emacs=, =Go=, =Ubuntu=, /Diving/, /Sci-Fi/
  * /company:/ =develated=

 #+BEGIN_NOTES

I've been a developer for over 20 years, starting with Basic and Pascal, then C++, C#,
even PHP for 3 years, and then I discovered Python through Django.

Since then, Python became my favourite language, and I've used it for all kinds of projects,
including web, desktop, and mobile applications, scripting and server-side software.

For 4 years I worked on porting a cloud deployment suite from Python to Go, and then I went
full-time into freelancing with Python, founding my own small company - develated.

 #+END_NOTES

* Pandas?
:PROPERTIES:
:CUSTOM_ID: pandas
:END:

#+ATTR_REVEAL: :frag t
[[file:img/many-a-pandas.jpeg]]

#+BEGIN_NOTES

So what about Pandas?

:)

#+END_NOTES

** =import pandas as pd=
:PROPERTIES:
:CUSTOM_ID: import-pandas
:END:

[[file:img/pandas_logo.png]]

#+ATTR_REVEAL: :frag (t)
  * Open source (BSD-licensed) Python library
  * Created by Wes McKinney in 2008
  * High-performance, easy-to-use data structures
  * Great API for data analysis, built on top of [[http://www.numpy.org/][NumPy]]
  * Well documented: [[http://pandas.pydata.org/pandas-docs/stable/][pandas.pydata.org/pandas-doc/stable/]]

 #+BEGIN_NOTES

How many of you know about Pandas?

OK, great!

How many of you use Pandas regularly?

Awesome!

OK, for those of you not familiar with it, here is a quick overview.

Pandas is an open source Python library for data analysis, created by Wes McKinney in 2008.

It provides high-performance, easy-to-use data structures, and a great API for data analysis,
built on top of NumPy.

It is very well documented, actively supported, and has a large community of users
and contributors.

 #+END_NOTES

* Pandas: Personal Favourites
:PROPERTIES:
:CUSTOM_ID: pandas-favourites
:END:

#+ATTR_REVEAL: :frag (t)
 * Easy to install, very few requirements
 * Fast as NumPy, yet more flexible and nicer to use
 * Reads/writes data in the most common formats
 * Works seamlessly with [[https://matplotlib.org/][matplotlib]] for plotting

#+BEGIN_NOTES

First time I've heard about Pandas was at EuroPython 2012, and since then I keep hearing
more and more about it from many people.

It's easy to install, especially on Linux, but also on Windows and Mac OS.

Unlike NumPy, which I still find awkward and counter-intuitive to work with, Pandas is
much nicer to use, more flexible, yet still just as fast as NumPy.

Reading and writing data in multiple formats, like CSV, Excel, HDF5, to name a few is
also an obvious advantage for me.

And since I think visually most of the time, I liked how easy it is produce matplotlib plots
from Pandas.

So, I liked Pandas, but ultimately encountered some issues which made it
difficult for me to use it.

#+END_NOTES

* Pandas: Personal Pain Points
:PROPERTIES:
:CUSTOM_ID: pandas-pain-points
:END:

#+ATTR_REVEAL: :frag (t)
 * Good documentation, but not a lot of tutorials
 * Confusingly many ways to do the same thing
 * Arcane indexing, even without MultiIndex
 * Sane defaults, but can be "too smart" in some cases

#+BEGIN_NOTES

There

#+END_NOTES

* SVG Mail Labels Generator
:PROPERTIES:
:CUSTOM_ID: svg-mail-labels-generator
:END:

/Goal:/ Send personalized mail, labeled in sender's handwriting.

** Requirements
:PROPERTIES:
:CUSTOM_ID: svg-requirements
:END:

#+ATTR_REVEAL: :frag (t)
   1. Acquire samples of users' handwriting as SVG files
   2. Extract individual letter/symbol SVGs from each sample page
   3. Compose arbitrary word SVGs using the letters
   4. Generate mail label SVGs from those words

** Acquiring Handwriting Samples
:PROPERTIES:
:reveal_background: img/svg-acquire.svg
:reveal_background_position: 50% 65%
:CUSTOM_ID: svg-acquire-handwriting
:END:

*** Example Input
:PROPERTIES:
:reveal_background: img/svg-example-page-bg.svg
:reveal_background_position: 50% 50%
:reveal_background_size: 45%
:reveal_data_state: svg-example-input-shown
:CUSTOM_ID: svg-example-input
:END:

\\
\\


[[file:img/example-page.svg]]

#+ATTR_REVEAL: :frag fade-down :frag_idx 1
[[file:img/example-detail.svg]]
[[file:img/svg-example-detail-bg.svg]]

\\
\\

/Excerpt of a user's SVG sample page./

*** Example Output
:PROPERTIES:
:CUSTOM_ID: svg-example-output
:reveal_background_size: 50%
:END:
[[file:img/svg-example-output.svg]]\\
/Generated SVG mail label for another user./

* Processing
:PROPERTIES:
:reveal_background: img/svg-processing.svg
:reveal_background_position: 50% 65%
:CUSTOM_ID: svg-processing
:END:

** Parsing
:PROPERTIES:
:CUSTOM_ID: svg-parsing
:END:
/Problem:/ Extracting pen strokes from SVG XML

#+ATTR_REVEAL: :frag roll-in none none :frag_idx 1
/Solution:/ I found [[https://github.com/mathandy/svgpathtools][svgpathtools]] which provides:

#+ATTR_REVEAL: :frag (t)
  * Classes: =Path= (base), =Line=, =CubicBezier=, =QuadraticBezier=
  * API for path intersections, bounding boxes, transformations
  * Reading and writing SVG lists paths from/to SVG files

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC python
import svgpathtools as spt

def parse_svg(filename):
  paths, attrs = spt.svg2paths(filename)
  # paths: list of Path instances
  # attrs: list of dicts with XML attributes
  return paths, attrs
#+END_SRC

** DataFrame Creation
:PROPERTIES:
:CUSTOM_ID: svg-dataframe
:END:

#+BEGIN_SRC python
import pandas as pd

def gen_records(svg_paths):
    for i, path in enumerate(svg_paths):
        xmin, xmax, ymin, ymax = path.bbox()
        yield dict(org_idx=i, xmin=xmin, ymin=ymin,
                   xmax=xmax, ymax=ymax, path=path)

def load_paths(filename):
    paths, _ = parse_svg(filename)
    return pd.DataFrame.from_records(gen_records(paths))
#+END_SRC

#+ATTR_REVEAL: :frag t
|---------+--------+--------+--------+-------+--------|
| org_idx | x_min  | y_min  | x_max  | y_max | path   |
|---------+--------+--------+--------+-------+--------|
| 0       | x_0    | y_0    | X_0    | Y_0   | p1     |
| ...     |        |        |        |       |        |
| n-1     | x_n-_1 | y_n-_1 | X_n-_1 | Y_n-1 | p_n-_1 |
|---------+--------+--------+--------+-------+--------|

** Letter Extraction
:PROPERTIES:
:CUSTOM_ID: svg-letters
:END:

/Problem:/ Compare each stroke with all nearby strokes and merge as letters

#+ATTR_REVEAL: :frag t
/Solution:/ DateFrame iteration and filtering (over multiple passes)

#+ATTR_REVEAL: :frag t
 #+BEGIN_SRC python
def merge_letters(df, merged, unmerged):
    merged = set([])
    unmerged = set(df.loc['org_idx'].tolist())

    df = merge_dots(df, merged, unmerged)
    df = merge_overlapping(df, merged, unmerged)
    df = merge_crossing_below(df, merged, unmerged)
    df = merge_crossing_above(df, merged, unmerged)
    df = merge_crossing_before(df, merged, unmerged)
    df = merge_crossing_after(df, merged, unmerged)
    return df, merged, unmerged
 #+END_SRC

*** Merging Fully Overlapping Paths
:PROPERTIES:
:CUSTOM_ID: svg-merge-overlapping
:END:

#+BEGIN_SRC python
def merge_overlapping(df, merged, unmerged):
    """Merges paths whose bboxes overlap completely."""

    for path in df.itertuples():
        candidates = df[(
            (df.xmin < path.xmin) &
            (df.xmax > path.xmax) &
            (df.ymin < path.ymin) &
            (df.ymax > path.ymax) &
        )]

        df = merge_candidates(df, path.Index, candidates.org_idx.values, merged, unmerged)

    return update_data_frame(df)
 #+END_SRC

*** Updating After Each Pass
:PROPERTIES:
:CUSTOM_ID: svg-updating
:END:

 #+BEGIN_SRC python
def update_data_frame(df):
     """Calculates additional properties of each path."""

     return (df.assign(
         width=lambda df: df.xmax - df.xmin,
         height=lambda df: df.ymax - df.ymin).assign(
             half_width=lambda df: df.width / 2,
             half_height=lambda df: df.height / 2,
             area=lambda df: df.width * df.height,
             aspect=lambda df: df.width / df.height)
         .sort_values(['ymin', 'ymax', 'xmin', 'xmax']))
  #+END_SRC

** Classification
:PROPERTIES:
:CUSTOM_ID: svg-classification
:END:

#+ATTR_REVEAL: :frag (t)
  * Manual process (deliberately)
  * External tool (no Pandas :/)
  * Loads merged unclassified letters
  * Shows them one by one and allows adjustment
  * Produces labeled letter / symbol SVG files

** Word Building
:PROPERTIES:
:CUSTOM_ID: svg-words
:END:

#+ATTR_REVEAL: :frag (t)
  * /Input:/ any word without spaces (e.g. =testing=)
  * /Selection:/ for each letter, picks a labeled variant
  * /Horizontal composition:/ merges selected variants with variable /kerning/
  * /Vertical alignment:/ according to the running baseline of the word
  * /Output:/ single word SVG file

#+ATTR_REVEAL: :frag t :frag_idx 2
file:img/example-word-debug-mode.svg\\
/Example (showing letter bounding boxes and baseline)/

** Labeling
:PROPERTIES:
:CUSTOM_ID: svg-labeling
:END:

#+ATTR_REVEAL: :frag (t)
  * /Input:/ Excel file with mail addresses
  * /Structure:/ one row per label, one column per line
  * /Parsing:/ as simple as =pd.read_excel()=
  * /Generation:/ builds words with variable spacing (for each column)
  * /Alignment:/ with variable /leading/ (vertical line spacing)

[[file:img/svg-example-output.svg]]

* What I Learned: /All You Need is Pandas!/
:PROPERTIES:
:reveal_background: img/high-five-panda.jpg
:reveal_background_position: 50% 85%
:reveal_background_size: 25%
:CUSTOM_ID: summary
:END:

#+ATTR_REVEAL: :frag (t)
  * Pandas is great for /any/ table-based data processing
  * Learn just a few features  (filtering, iteration) and use them
  * Understand indexing and the power of =MultiIndex=
  * Dealing with CSV or Excel I/O is trivial and fast
  * Docs are great, but there is a lot to read initially
  * Start with [[http://pandas.pydata.org/pandas-docs/stable/10min.html][10 Minutes to pandas]]

* Questions ?
:PROPERTIES:
:CUSTOM_ID: questions
:END:

\\

How to get in touch:

=@dimitern=\\
[[file:img/icontwitter.png]]
[[file:img/icongithub.png]]


\\

One more thing,
\\
/buy Wes McKinney's book "Python for Data Analysis" (seriously)/

[[file:img/pandas-book.gif]]
