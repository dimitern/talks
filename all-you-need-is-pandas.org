#+TITLE: All You Need is Pandas
#+TITLE: Unexpected Success Stories
#+AUTHOR: Dimiter Naydenov
#+EMAIL: @dimitern

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal_center:nil
#+OPTIONS: reveal_progress:nil
#+OPTIONS: reveal_width:1920
#+OPTIONS: reveal_height:1080
#+OPTIONS: reveal_history:t
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 1.0
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: sky
#+REVEAL_ROOT: reveal.js-3.6.0/
#+REVEAL_EXTRA_CSS: extra.css
#+REVEAL_EXTRA_JS: {src:'js/jquery-3.3.1.slim.min.js', async:false}, {src:'js/story1-anim.js', async:false}
#+REVEAL_TRANS: cube
#+REVEAL_SPEED: default
#+REVEAL_HLEVEL: 1
#+REVEAL_PLUGINS: (classList highlight notes zoom)
#+REVEAL_SLIDE_HEADER: <br/><br/>
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION: slide
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE: 800px
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT: no-repeat


* All You Need is Pandas
:PROPERTIES:
:CUSTOM_ID: title
:END:

/Unexpected Success Stories/

\\
\\

Dimiter Naydenov

[[https://twitter.com/dimitern/][@dimitern]]
[[https://twitter.com/dimitern/][file:img/icon-twitter.svg]]
[[https://github.com/dimitern/][file:img/icon-github.svg]]

\\
\\

[[./img/europython-2018-logo-white-bg-small.png]]

#+BEGIN_NOTES

Hello everyone, and thanks for joining!

My name is Dimiter Naydenov, and today I'm going to talk about my experiences with
the awesome Pandas library, why I love it, and how surprisingly practical I found it to be.

Let me start by telling you a bit about myself first.

#+END_NOTES

* About me
:PROPERTIES:
:CUSTOM_ID: about-me
:END:

=from Bulgaria.Sofia import Dimiter.Naydenov=

 * /loves:/ Python, Emacs, Ubuntu, Scuba Diving, Sci-Fi

#+BEGIN_NOTES

I've been a developer for over 20 years, starting with Basic, going through Pascal, C++, C#,
even PHP for 3 years, before I discovering Python through Django.

Python is my favourite language, and I've used it for all kinds of projects, not just for web,
but also desktop apps, scripts, and backend services.

For 4 years I worked on a cloud deployment suite ported from Python to Go, then after that I decided
to go on my own, started a small company, and got full-time into freelancing.

#+END_NOTES

* Pandas?
:PROPERTIES:
:CUSTOM_ID: pandas
:END:

#+ATTR_REVEAL: :frag t
[[./img/many-a-pandas.jpeg]]

#+BEGIN_NOTES

So what about Pandas?

:)

#+END_NOTES

** =import pandas as pd=
:PROPERTIES:
:CUSTOM_ID: import-pandas
:END:

 [[./img/pandas_logo.png]]

  * Open source (BSD-licensed) Python library
  * Easy-to-use, high-performance data structures
  * Great API for data analysis, built on top of [[http://www.numpy.org/][NumPy]]
  * Well documented: [[http://pandas.pydata.org/pandas-docs/stable/][pandas.pydata.org/pandas-doc/stable/]]

 #+BEGIN_NOTES

 How many of you have never used Pandas or even heard about it?

 ----if-more-than-a-few------------------------------------------------------------
 OK, so here is a quick overview.

 Pandas is an open source Python library for data analysis, built on top of NumPy,
 created by Wes McKinney in 2008.

 It is very well documented, actively supported, and has a large community of users
 and contributors.

 ----if-just-a-few-----------------------------------------------------------------
 Wow, not a lot of people, that's great! No need for an introduction then.

 #+END_NOTES

* Pandas, Best of
#+ATTR_REVEAL: :frag (roll-in)
 * Easy to install, very few requirements
 * Fast as NumPy, yet more flexible and nicer to use
 * Reads/writes data in the most common formats
 * Works seamlessly with [[https://matplotlib.org/][matplotlib]] for plotting

#+BEGIN_NOTES

First time I've heard about Pandas was at EuroPython 2012, and since then I keep hearing
more and more about it from many people.

Unlike NumPy, which I still find awkward and counter-intuitive to work with, Pandas is
much nicer to use, more flexible, yet still as fast as NumPy.

Reading and writing data in multiple formats, like CSV, Excel, HDF5, to name a few is
also an obvious advantage for me.

And since I think visually most of the time, I liked how easy it is produce matplotlib plots
from Pandas.

#+END_NOTES

* Pandas, Sad
#+ATTR_REVEAL: :frag (roll-in)
 * Good documentation, but a few good hands-on guides
 * Cannot "just use it", need to read a lot first
 * Indexing is confusing, even without MultiIndex
 * Can I just get my integers back, please?

#+BEGIN_NOTES

So I tried Pandas, but ultimately could not find a good use for it at the time.

#+END_NOTES

* _Story 1:_ Mail Labels Generator
:PROPERTIES:
:CUSTOM_ID: story1-svg-mail-labels-generator
:END:

/Goal:/ Send personalized mail, labeled  in sender's handwriting.

** Requirements
:PROPERTIES:
:CUSTOM_ID: story1-requirements
:END:
 #+ATTR_REVEAL: :frag (t)
   1. Acquire samples of users' handwriting as SVG files
   2. Extract individual letter/symbol SVGs from each sample page
   3. Compose arbitrary word SVGs using the letters
   4. Generate mail label SVGs from those words

** Acquiring Handwriting Samples
:PROPERTIES:
:reveal_background: img/story1-acquire.svg
:CUSTOM_ID: story1-acquire-handwriting
:END:

*** Example Input
:PROPERTIES:
:reveal_background: img/story1-example-page-bg.svg
:reveal_background_position: 50% 40%
:reveal_data_state: example-input-shown
:CUSTOM_ID: story1-example-input
:END:

 [[./img/example-page.svg]]

 #+ATTR_REVEAL: :frag fade-down :frag_idx 1
 [[./img/example-detail.svg]]
 [[./img/story1-example-detail-bg.svg]]

 \\
 \\

 /Excerpt of one SVG sample page for a user./

** Processing
:PROPERTIES:
:reveal_background: img/story1-processing.svg
:CUSTOM_ID: story1-processing
:END:

*** Parsing
:PROPERTIES:
:CUSTOM_ID: story1-parsing
:END:
#+ATTR_REVEAL: :frag t

Problem #1:

|-------+------+------+------+------+------|
| index | xmin | ymin | xmax | ymax | path |
|-------+------+------+------+------+------|
|     1 | x0   | y0   | x1   | y1   | p1   |
|-------+------+------+------+------+------|

** Example Output
:PROPERTIES:
:CUSTOM_ID: story1-example-output
:END:
[[./img/story1-example-label.svg]]\\
/Generated SVG mail label for another user./

* _Story 2:_ Norwegian Business Registry

/Goal:/ Fast daily import of millions of CSV rows into PostgreSQL.

** Input Data

 * Open Data, free to use via an API, or as a complete CSV download
 * Contains all companies registered in Norway (over 1 million)
 * Download link: [[http://data.brreg.no/enhetsregisteret/download/enheter][data.brreg.no]]
 * CSV file with 40 columns is about 345MB when unzipped
 * 40 columns in total, but only 5 are need for the import

** Environment

 * Django back-office web application using PostgreSQL and Celery.
 * Deployed on a small AWS VM instance (2GB RAM, 8GB HDD).
 * Used to validate and analyze e-invoice API traffic.
 * Reconciles e-invoice coming mostly from Norway, but also across EU
 * Needs fast lookups by Organization/VAT number for known companies

** Import Procedure

 #+ATTR_REVEAL: :frag (t)
   1. Download and unzip the CSV file
   2. Load all 1.1M+ rows  only 6 out of the 65 column, 1.1M+ Load
   2. Extract 6 of the 65 columns in the CSV, Only a few of Filter out most of the datath
   3. Compose arbitrary word SVGs using the letters
   4. Generate mail label SVGs from those words


* Any Questions ?
